/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import sunScene from "../assets/3d/the-sun.glb";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Star_Surface001: THREE.Mesh;
  };
  materials: {
    ["sun baked"]: THREE.MeshStandardMaterial;
  };
};

const rotationSpeed = 0.0009;

export function Sun(props: React.JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(sunScene) as unknown as GLTFResult;

  const sunRef = useRef<THREE.Group<THREE.Object3DEventMap>>(null);

  useFrame(() => {
    if (!sunRef.current) return;
    sunRef.current.rotation.y += rotationSpeed;
  });

  return (
    <group {...props} dispose={null} ref={sunRef}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Star_Surface001.geometry}
        material={materials["sun baked"]}
        position={[0, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload(sunScene);
