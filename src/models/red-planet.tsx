/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import RedPlanetModel from "@/assets/3d/red-planet.glb";

type GLTFResult = GLTF & {
  nodes: {
    surfacebaked: THREE.Mesh;
    cloudsbaked: THREE.Mesh;
  };
  materials: {
    ["surface.baked"]: THREE.MeshStandardMaterial;
    ["clouds.baked"]: THREE.MeshPhysicalMaterial;
  };
};

export function RedPlanet(props: React.JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(RedPlanetModel) as unknown as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.surfacebaked.geometry}
        material={materials["surface.baked"]}
        position={[0, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cloudsbaked.geometry}
        material={materials["clouds.baked"]}
        position={[0, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload(RedPlanetModel);
